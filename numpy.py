# -*- coding: utf-8 -*-
"""numpy.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ioQmqOXvupH9FzyeEDB0TxOi9j--gSRs

###pandas
"""

num=[4,2,7,4,9,1,2,7]
num=set(num)
num=list(num)
num[::-1]

`import pandas as pd
import numpy as np

data1 = {'Name':['A', 'B', 'C'],

               'Age':[1, 2, 3],

               'Country':['USA','Canada','Bangalore']}

df1 = pd.DataFrame(data1)

 

df1.loc[1,'Age']

l1=np.arange(50)
l=list(l1)
n2=np.array(l)
s=pd.Series(n2)

#Question1
n1=np.random.randint(400,800,50)
n2=pd.Series(n1)
n2

#question2
s2=pd.Series({'Maths':25,'English':35})
s2
s2['Maths']=30
s2['sanskrit']=40
s2

n2.sort_values(ascending=True)

from pickle import TRUE
n2.sort_values(ascending=True,inplace=False)

import pandas as pd
data=pd.read_csv("/content/titanic.csv")
data.head()
df=pd.DataFrame(data)

pip install sweetviz

import sweetviz
my_report=sweetviz.analyze([data,"titanic"])
my_report.show_html("data_report.html")

df.info()

df.Age

df.isnull().sum()

df.corr()

iss=pd.read_json('http://bit.ly/issjson')
iss

df.dropna()
df.isnull().sum()
df.dropna()
df.isnull().sum()

df.fillna(130,inplace=True)
df

df.isnull().sum()

a=pd.read_csv("/content/titanic.csv")
k=a["Age"].mean()
k
a["Age"].fillna(k,inplace=True)
a

df["Age"].plot(kind="hist")

import pandas as pd
pd.crosstab(df.Sex,df.Survived)

df["Name"].map(lambda x:"hello  " +x)

"""###Pandas DataFrame

"""

import pandas as pd
import numpy as np
l1=np.arange(50).reshape(10,5)
df=pd.DataFrame(l1)
df.shape
df.dtypes
df.info()

df=df.rename(columns={0:'A',1:'B',2:'C',3:'D',4:'E'})
df

df.describe()##statistics

df1=pd.DataFrame({'A':[10,11,12,13],'B':[20,21,22,23],'C':[30,31,32,33]})
df1

df1.loc[0,'B']###3acessing the element
df1.iloc[1,2]####in numpy form
df1.iloc[0:4,1:3]

new_df=df1[['B','C']]
new_df

df['B']>20

df[df['B']>20]

df.sort_values(by='C',ascending=False)#### sort the particular column

l2=np.random.randint(0,20,500).reshape(100,5)
df4=pd.DataFrame(l2)
df4.rename(columns=
           {0:'a',1:'b',2:'c',3:'d'})
#df4.sort_values(by=['b','c'],ascending=True)

l3=np.random.randint(0,20,100).reshape(20,5)#### concat
df5=pd.DataFrame(l3)
df5.rename(columns={0:'a',1:'b',2:'c',3:'d',4:'e'})
l6=pd.concat((df4,df5),axis=0)
l6.size

l6.head(10)

l6.tail()

"""###numpy"""

import numpy as np
b=np.array(range(100))
a=b.reshape(20,5)
print(a)

a[3:8,1:4]

l1=[1,2,3]
l2=[4,5,6]
h=np.concatenate((l1,l2))
h

a1=np.arange(51,101).reshape(10,5)
a1

w1=np.arange(20).reshape((10,2))
w2=np.arange(30).reshape((10,3))
np.concatenate((w1,w2),axis=1)

###spliting array  equal parts 
d1=np.arange(10)
np.split(d1,5)

d1=np.arange(11) ## split_array (adjust the elements)
np.array_split(d1,5)

####splitting in 2d array
a1=np.arange(16).reshape(4,4)
a1

np.vsplit(a1,2)### it divide equal splits

#spliting with equal number of colomuns 
n1=np.array((1,2,3,4,5))
np.split(n1,[1,2,4])

n1=np.arange(50).reshape(10,5)
n1

n2=np.arange(50).reshape(n1,2)
n2

#operation in numpy

#different operation in 2d array
x=np.arange(20).reshape(4,5)
x

n=np.sum(x,axis=0)
n

n=np.min(x,axis=0)
n



"""####flower jyputer problem

1. Load a data from the given url as a numpy array
"""

url = 'https://archive.ics.uci.edu/ml/machine-learning-databases/iris/iris.data'
import numpy as np

n1=np.loadtxt(url,dtype=str,delimiter=',')

n1
n1=n1[:,:4].astype(float)

"""Check the shape and first 5 rows"""

n1[:5]



""" Write a code to extract text column "sepallength" from the imported iris array."""

flower_type=np.loadtxt(url,dtype=str,delimiter=',',usecols=4)
flower_type

"""4. Write a code to normalize an array so the values range exactly between 0 and 1

"""

max_a=np.max(n1,axis=0)####normalization
min_a=np.min(n1,axis=0)
normalization=(n1-min_a)/(max_a-min_a)
normalization

""" Find the 25th, 50th, and 75th percentile of iris's sepallength."""

np.percentile(n1[:,0],25)

np.percentile(n1[:,0],50)

np.percentile(n1[:,0],75)

"""6. Insert np.nan values at 50 random positions in iris datatset."""

s=set()
while len(s)<50:
  s.add(np.random.randint(0,600))

len(s)

flattened_array=n1.reshape(600)
flattened_array[list(s)]=np.nan

""" 7. Find the number and position of missing values in the column 'sepallength'."""

t=np.isnan(n1[:,0])
list_pa=np.arange(150)
list_pa
t
list_pa[t]=False

"""### 8. Retrieve the rows of iris that has sepallength(1st column) < 5"""

n1[n1[:,0]<5]

"""# New Section

### 9. Select rows that does not contain any missing values.
"""

